{"name": "添加监控点重复", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <api_practise_1.test_data.test_camera.TestCases object at 0x00000216EB4FCF88>\nitem = {'case_id': 3, 'check': '1000==code\\n非法请求==codeMsg\\n', 'expected': '{\"code\":1000, \"codeMsg\":\"非法请求\", \"msg\":\"该监控点名称已存在\"}', 'extra': None, ...}\nsetUp0 = None\n\n    @pytest.mark.parametrize('item', test_data)\n    @pytest.mark.usefixtures(\"setup1\")\n    def test_001(self, item, setUp0):\n        '''\n        监控点接口\n        '''\n        global result  # 指明全Ju变量\n        global COOKIES  # 设置cookies为全局变量\n    \n        allure.dynamic.title(item['title'])\n        allure.dynamic.description(item['title'])\n        url,method,param,case_id,modular,title,expected,check_point_list,header,extra=DoExcel.iter_excel_params(item)\n    \n        self.do_request.add_headers(do_conf_yaml.read(\"api\", \"authorization\"))  # 添加认证信息\n        extra_token = getattr(get_data.GetData, \"token\")\n        token_header = {'keensense-traffic-token': extra_token}\n        self.do_request.add_headers(token_header)  # 添加token\n        self.do_request.add_headers(header)  # 添加原始头部\n    \n        sql = item[\"sql\"]\n        print(sql)\n        param = get_data.GetData().replace(param)\n        print(\"最终param-----{}\".format(param))\n        if sql is not None:\n            sql = get_data.GetData().replace(sql)\n            print(\"最终sql------{}\".format(sql))\n        logger.info(\"正在发起{}模块中的第{}条用例:{}\".format(modular, case_id, title))\n        logger.info(\"测试数据是：{}\".format(param))\n        with allure.step(\"发起请求，获取实际结果\"):\n            test_result = DoRequests.be_result(item, param, url, method, self.do_request.session.headers)  # 发起请求\n        print(test_result.text)\n        if getattr(get_data.GetData, 'cameraId') is not None:\n            print(\"删除的camemaId:{}\".format(getattr(get_data.GetData, 'cameraId')))\n        # 增加一个判断 是在完成完请求之后才去判断\n        # 获取cameraId\n        if sql is not None and eval(sql)[\"sql_1\"]:\n            delete_cameraId = DoMysql().do_mysql(eval(sql)[\"sql_1\"], 1)\n            if delete_cameraId is None:\n                logger.info(\"监控点删除成功\")\n            else:\n                cameraId = DoMysql().do_mysql(eval(sql)[\"sql_1\"], 1)[0]\n                setattr(get_data.GetData, 'cameraId', str(cameraId))\n        with allure.step(\"处理相关数据依赖\"):\n            if test_result.cookies:  # 判断请求cookies是否为空\n                cookies = requests.utils.dict_from_cookiejar(test_result.cookies)\n                setattr(get_data.GetData, \"COOKIES\", cookies)\n            if title == \"登录接口正常验证\":  # 提取token\n                if test_result.json().get(extra):\n                    token = test_result.json().get(extra)\n                    setattr(get_data.GetData, \"token\", token)\n        new_expected = json.loads(expected)  # 处理Null无法识别的问题\n        # 输出测试结果和实际结果，进行断言比对，注意这里需要将实际结果的数据和预期结果的数据都改成字典类型，方便比对\n>       logger.info(\"测试结果：{}\".format(test_result.json()))\n\ntest_data\\test_camera.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\PycharmProjects\\api_practise_1\\lib\\site-packages\\requests\\models.py:897: in json\n    return complexjson.loads(self.text, **kwargs)\nD:\\python37\\lib\\json\\__init__.py:348: in loads\n    return _default_decoder.decode(s)\nD:\\python37\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000216E042AFC8>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>\\n    <...er.msg(result.msg, {icon: 2, time:2000});\\n                }\\n            }\\n        })\\n    }\\n</script>\\n\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\python37\\lib\\json\\decoder.py:355: JSONDecodeError"}, "description": "添加监控点重复", "steps": [{"name": "发起请求，获取实际结果", "status": "passed", "start": 1598440742079, "stop": 1598440742096}, {"name": "处理相关数据依赖", "status": "passed", "start": 1598440742110, "stop": 1598440742110}], "attachments": [{"name": "log", "source": "cf8cd1fc-d5f0-4d2e-be7d-0df5db0aa226-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "item", "value": "{'case_id': 3, 'modular': '重复添加监控点', 'method': 'post', 'url': '/api_traffic/camera', 'header': \" {'Content-Type': 'application/json;charset=UTF-8'}\", 'title': '添加监控点重复', 'param': '{\"name\":\"#sql_name#\",\"region\":\"42407631\",\"isHighSpeedIntersection\":1,\"cameratype\":2,\"latitude\":22.551171315231063,\"longitude\":114.06369779966558,\"url\":\"\",\"sceneId\":25,\"direction\":\"111\",\"crossingNumber\":\"111\"}', 'sql': '{\"sql_1\":\"SELECT id FROM u2s_traffic.camera WHERE name=#name#\"}', 'expected': '{\"code\":1000, \"codeMsg\":\"非法请求\", \"msg\":\"该监控点名称已存在\"}', 'check': '1000==code\\n非法请求==codeMsg\\n', 'extra': None}"}], "start": 1598440742033, "stop": 1598440742111, "uuid": "ee028cb6-f933-448f-ab70-2cacb32fbb63", "historyId": "909647c59e6f3d00b292316b8ab84c52", "testCaseId": "496da03502134d454b0e78eb466db09f", "fullName": "test_data.test_camera.TestCases#test_001", "labels": [{"name": "feature", "value": "监控点"}, {"name": "parentSuite", "value": "test_data"}, {"name": "suite", "value": "test_camera"}, {"name": "subSuite", "value": "TestCases"}, {"name": "host", "value": "DESKTOP-C04F7E5"}, {"name": "thread", "value": "45368-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_data.test_camera"}]}