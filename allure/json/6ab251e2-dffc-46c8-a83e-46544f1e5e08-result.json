{
  "name": "监控点维度查询",
  "status": "broken",
  "statusDetails": {
    "message": "KeyError: 'code'",
    "trace": "self = <api_practise_1.test_data.test_add_task.TestCases object at 0x0000027FA7AB7488>\nitem = {'case_id': 8, 'expected': '{\"state\": true}', 'header': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'method': 'get', ...}\nsetUp = None\n\n    @pytest.mark.parametrize('item', test_data)\n    def test_001(self, item,setUp):\n        '''\n        任务模块接口流程用例\n        '''\n        global result\n        global COOKIES\n        allure.dynamic.title(item['title'])\n        allure.dynamic.description(item['title'])\n        # 获取item中的用例数据\n        url = item[\"url\"]\n        url = get_data.GetData().replace(url)\n        method = item[\"method\"]\n        param = item[\"param\"]  # 返回的是字符串类型的数据\n        case_id = item[\"case_id\"]\n        modular = item[\"modular\"]\n        header = eval(item[\"header\"])\n        title = item[\"title\"]\n        if title == \"添加结构化任务\":\n            qurey_cameraid = \"SELECT id FROM u2s_traffic.camera WHERE name='测试test'\"\n            cameraid = DoMysql().do_mysql(qurey_cameraid)[0]\n            url=video_data[\"url\"]\n            param = str(eval(video_data[\"param\"])[0])\n            param = get_data.GetData().replace(param)\n            param=eval(param)\n            files=eval(video_data[\"param\"])[-1]\n            header=eval(video_data[\"header\"])\n            test_result = DoRequests(url, method,param, files=files).request(headers=header,\n                                                                                  cookies=getattr(get_data.GetData,\n                                                                                                  \"COOKIES\"))\n    \n            qurey_fileid = \"SELECT id FROM u2s_traffic.ctrl_unit_file WHERE camera_id={}\".format(cameraid)\n            fileid=DoMysql().do_mysql(qurey_fileid)[0]\n            setattr(get_data.GetData, \"cameraFileId\", str(fileid))\n            setattr(get_data.GetData, \"cameraId\",str(cameraid))\n            time.sleep(15)\n    \n    \n        expected = item[\"expected\"]\n        param = item[\"param\"]\n        url = item[\"url\"]\n        url = get_data.GetData().replace(url)\n        sql = item[\"sql\"]\n        if sql is not None:\n            sql = get_data.GetData().replace(sql)\n            print(\"从数据库获取的参数化sql:{}\".format(sql))\n        param = get_data.GetData().replace(param)\n        print(\"目前的param是{}\".format(param))\n        logger.info(\"正在发起{}模块中的第{}条用例:{}\".format(modular, case_id, title))\n        logger.info(\"测试数据是：{}\".format(param))\n        # 执行接口测试，cookies利用反射进行动态的获取\n    \n        if \"application/json\" in item[\"header\"]:\n            new_param = param\n        else:\n            new_param = eval(param)\n        if isinstance(new_param, tuple):\n            test_result = DoRequests(url, method, new_param).request(headers=header,\n                                                                     cookies=getattr(get_data.GetData, \"COOKIES\"))\n        else:\n    \n            test_result = DoRequests(url, method, new_param.encode(\"utf-8\")).request(headers=header,\n                                                                                     cookies=getattr(get_data.GetData,\n                                                                                                     \"COOKIES\"))\n        if \"data\" in test_result.json() and test_result.json()[\"data\"] is not None and len(test_result.json()[\"data\"]) == 19:\n            setattr(get_data.GetData,\"serialnumber\",test_result.json()[\"data\"])\n            print(\"需要删除的任务号为:{}\".format(getattr(get_data.GetData, \"serialnumber\")))\n        print(test_result.text)\n    \n    \n        # 增加一个判断 是在完成完请求之后才去判断\n        #获取cameraId\n        if sql is not None and \"sql_1\" in eval(sql):\n            delete_cameraId = DoMysql().do_mysql(eval(sql)[\"sql_1\"], 1)\n            if delete_cameraId is None:\n                logger.info(\"监控点删除成功\")\n            else:\n                cameraId = DoMysql().do_mysql(eval(sql)[\"sql_1\"], 1)[0]\n                setattr(get_data.GetData,'cameraId',str(cameraId))\n                print(\"需要删除的camemaId:{}\".format(getattr(get_data.GetData, 'cameraId')))\n        #获取任务号\n        if sql is not None and \"sql_2\" in eval(sql):\n            task_data=DoMysql().do_mysql(eval(sql)[\"sql_2\"], 1)\n            print(task_data)\n            logger.info(\"新增任务获取的任务号数据为{}\".format(task_data))\n    \n        if test_result.cookies:  # 判断请求cookies是否为空\n            cookies = requests.utils.dict_from_cookiejar(test_result.cookies)\n            setattr(get_data.GetData, \"COOKIES\", cookies)\n        new_expected = json.loads(expected)  # 处理Null无法识别的问题\n        # 输出测试结果和实际结果，进行断言比对，注意这里需要将实际结果的数据和预期结果的数据都改成字典类型，方便比对\n        logger.info(\"测试结果是：{}\".format(test_result.json()))\n        logger.info(\"预期结果是：{}\".format(new_expected))\n        try:\n>           assert new_expected[\"code\"] == test_result.json()[\"code\"]\nE           KeyError: 'code'\n\ntest_data\\test_add_task.py:126: KeyError"
  },
  "description": "监控点维度查询",
  "attachments": [
    {
      "name": "log",
      "source": "510c2608-5cb0-419d-92d2-b08ae640946b-attachment.txt",
      "type": "text/plain"
    },
    {
      "name": "stdout",
      "source": "58501d36-1c0e-46f9-9ee4-0a8d04e02d7d-attachment.txt",
      "type": "text/plain"
    },
    {
      "name": "stderr",
      "source": "faf0b188-c8f2-4cf0-9d4e-0733078ac6b8-attachment.txt",
      "type": "text/plain"
    }
  ],
  "parameters": [
    {
      "name": "item",
      "value": "{'case_id': 8, 'modular': '离线文件', 'method': 'get', 'url': 'http://172.16.1.129:9088/ctrlUnitFile/queryFileByCameraId?page=1&rows=1', 'header': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'title': '监控点维度查询', 'param': \"'\", 'sql': None, 'expected': '{\"state\": true}'}"
    }
  ],
  "start": 1589782283390,
  "stop": 1589782283551,
  "uuid": "21342823-de1e-4359-9c31-3136edba7a4e",
  "historyId": "8ab821e6cfd09993159000be72ca6010",
  "testCaseId": "fe2c25558fe97aa3f0100bd83fe61829",
  "fullName": "test_data.test_add_task.TestCases#test_001",
  "labels": [
    {
      "name": "feature",
      "value": "结构化任务添加"
    },
    {
      "name": "parentSuite",
      "value": "test_data"
    },
    {
      "name": "suite",
      "value": "test_add_task"
    },
    {
      "name": "subSuite",
      "value": "TestCases"
    },
    {
      "name": "host",
      "value": "DESKTOP-C04F7E5"
    },
    {
      "name": "thread",
      "value": "90328-MainThread"
    },
    {
      "name": "framework",
      "value": "pytest"
    },
    {
      "name": "language",
      "value": "cpython3"
    },
    {
      "name": "package",
      "value": "test_data.test_add_task"
    }
  ]
}